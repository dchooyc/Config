{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"console.log": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ll",
		"body": [
			"console.log('$1');$2",
		],
		"description": "Log output to console"
	},
	"import": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ii",
		"body": [
			"import $1 from \"$2\";$3",
		],
		"description": "import from a filepath"
	},
	"component": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "cc",
		"body": [
			"const $1 = ($2) => {",
			"\treturn (",
			"\t\t$3",
			"\t);",
			"};",
		],
		"description": "create component"
	},
	"export": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ee",
		"body": [
			"export default $1;$2",
		],
		"description": "export component"
	},
	"border": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "bb",
		"body": [
			"style={{ border: \"2px solid ${1:red}\" }}$2",
		],
		"description": "add border style"
	},
	"full functional component": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ff",
		"body": [
			"import { ReactNode, FC } from \"react\";",
			"",
			"interface $1Props {",
			"\tclassName?: string;",
			"\tchildren?: ReactNode;",
			"\tstyle?: object;",
			"}",
			"",
			"export const $1: FC<$1Props> = ({",
			"\tclassName = \"\",",
			"\tchildren = null,",
			"\tstyle = {},",
			"}) => {",
			"\treturn (",
			"\t\t<div",
			"\t\t\tclassName={className}",
			"\t\t\tstyle={style}",
			"\t\t>",
			"\t\t\t{children}",
			"\t\t</div>",
			"\t);",
			"};"
		],
		"description": "create functional component"
	},
	"use state": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ss",
		"body": [
			"const [$1, set${2:${1/([a-z])(.*)/${1:/upcase}${2}/}}] = useState(${3:false});$0"
		],
		"description": "declare use state"
	},
	"create hook": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "zz",
		"body": [
			"import { useEffect } from \"react\";\n",
			"export default function use$1($2: $3) {",
			"\tuseEffect(() => {",
			"\t\t$4",
			"\t}, [$2]);",
			"}"
		],
		"description": "create a hook"
	},
	"create page": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "pp",
		"body": [
			"\"use client\";\n",
			"export default function $1() {",
			"\treturn (",
			"\t\t<main className=\"$2\">",
			"\t\t</main>",
			"\t);",
			"}"
		],
		"description": "create a page"
	},
	"flex div": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "dd",
		"body": [
			"<div className=\"flex flex-row justify-center items-center\">",
			"\t$1",
			"</div>"
		],
		"description": "create a flex div"
	},
	"popup state": {
		"scope": "javascript,typescript,javascriptreact,typescriptreact",
		"prefix": "ps",
		"body": [
			"import { create } from \"zustand\";\n",
			"interface $1PopupState {",
			"\topen: boolean;",
			"\thandleOpen: () => void;",
			"}\n",
			"export const use$1PopupStore = create<$1PopupState>()((set) => ({",
			"\topen: false,",
			"\thandleOpen: () => set(($1PopupState) => ({",
			"\t\topen: $1PopupState.open !== true",
			"\t})),",
			"}));"
		],
		"description": "use zustand to manage popup state"
	},
}
